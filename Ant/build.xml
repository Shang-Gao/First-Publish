<project name="Ant_prj_name" default="test" basedir="." xmlns:sf="antlib:com.salesforce">

    <property file="${Ant_prj_name.basedir}/build.properties"/>
    <property environment="env"/>

    <!-- Setting default value for username, password and session id properties to empty string 
         so unset values are treated as empty. Without this, ant expressions such as ${sf.username}
         will be treated literally.
    -->
    <condition property="sf.username" value=""> 
		<not> 
			<isset property="sf.username"/> 
		</not> 
	</condition>
	
    <condition property="sf.password" value=""> <not> <isset property="sf.password"/> </not> </condition>
    <condition property="sf.sessionId" value=""> <not> <isset property="sf.sessionId"/> </not> </condition>
	<condition property="sf.maxPoll" value=""> <not> <isset property="sf.maxPoll"/> </not> </condition>
	<condition property="sf.serverurl" value=""> <not> <isset property="sf.serverurl"/> </not> </condition>
	
	<property name="sg.maxPoll" value="200" />


    <taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
        <classpath>
            <pathelement location="${Ant_prj_name.basedir}/ant-salesforce.jar" />        	
        </classpath>
    </taskdef>
    
    <taskdef  resource="net/sf/antcontrib/antlib.xml" 
         classpath="${Ant_prj_name.basedir}/lib/ant-contrib-1.0b2.jar" />
	
	<delete dir="@{dir}" />
    <mkdir dir="@{dir}"/>
    <mkdir dir="@{dir}/unpackaged"/>
    <mkdir dir="@{dir}/standard"/>
 
	
	<target name="t11">
		<echo> -------------sssggg------------</echo>
	</target>
	
	<target name="retrieveHmAus">
      <sf:retrieve username="${sf.HmAusUsername}" password="${sf.HmAusPassword}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" 
	  retrieveTarget="@{dir}\standard" unpackaged="${Ant_prj_name.basedir}/package.xml" trace="true"/>
    </target>
	
	<target name="deployHmAus">
      <!-- Upload the contents of the "codepkg" directory, running the tests for just 1 class -->
      <sf:deploy username="${sf.HmAusUsername}" password="${sf.HmAusPassword}" serverurl="${sf.serverurl}" maxPoll="${sg.maxPoll}" deployRoot="DeployHmAus\src" rollbackOnError="true" runAllTests="false" checkOnly="false">

      </sf:deploy>
    </target>
	
	<!-- Shows removing code; only succeeds if done after deployCode -->
    <target name="undeployHmAus">
      <sf:deploy username="${sf.HmAusUsername}" password="${sf.HmAusPassword}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="Undeploy_HmAus"/>
    </target>
	
	
    <!-- Shows removing code; only succeeds if done after deployCode -->
    <target name="undeployCode">
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="removecodepkg"/>
    </target>	

    <!-- Shows retrieving code; only succeeds if done after deployCode -->
    <target name="retrieveCode">
      <!-- Retrieve the contents listed in the file codepkg/package.xml into the codepkg directory -->
      <sf:retrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="codepkg" unpackaged="codepkg/package.xml"/>
    </target>

    <!-- Shows deploying code, running all tests, and running tests (1 of which fails), and logging. -->
    <target name="deployCodeFailingTest">
      <!-- Upload the contents of the "codepkg" package, running all tests -->
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" testLevel="RunAllTestsInOrg" rollbackOnError="true" logType="Debugonly"/>
    </target>

    <!-- Shows check only; never actually saves to the server -->
    <target name="deployCodeCheckOnly">
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" checkOnly="true"/>
    </target>
	
	<!-- Shows quick deployment of recent validation. Set the property sf.recentValidationId to your recent check only deployment Id -->
	<target name="quickDeploy">
	  <sf:deployRecentValidation  username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" recentValidationId="${sf.recentValidationId}"/>
	</target>
	
	<!-- Shows cancel deployment of deploy request either pending or in progress. Set property sf.requestId to Id of pending or in progress deploy request -->
	<target name="cancelDeploy">
	  <sf:cancelDeploy  username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" requestId="${sf.requestId}"/>
	</target>

	<!-- Retrieve the information of all items of a particular metadata type -->
    <target name="listMetadata">
      <sf:listMetadata username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" metadataType="${sf.metadataType}"/>
    </target>

	<!-- Retrieve the information on all supported metadata type -->
    <target name="describeMetadata">
      <sf:describeMetadata username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}"/>
    </target>
</project>
